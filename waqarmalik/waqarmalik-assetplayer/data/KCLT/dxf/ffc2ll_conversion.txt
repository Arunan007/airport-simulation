/***********************************************************************
   ROUTINE NAME:   ffc2LatLonCoords

   DESCRIPTION: 
      Converts from FFC 2D visual map XY coordinates in feet to 
      lat/long in degrees. The equations were leveraged from
      HLA toolbox code.

   REVISION HISTORY:
      ci           7/20/12          Created
  
   INPUT PARAMETERS:
      xffc  -  2D ffc visual map coordinate in x direction along the longitude lines
      yffc  -  2D ffc visual map coordinate in y direction along the latitude lines

   OUTPUT PARAMETERS:
      latitude  -  in degrees
      longitude -  in degrees, west direction is negative
************************************************************************/
void
ffc2LatLonCoords(double xffc, double yffc, 
                 double *longitude, double *latitude,
                 struct twoDMapConversion *apMap)
{
    double lonOrigin, latOrigin,
           earthRadius, xOffset, yOffset;

    double lonOriginRad, latOriginRad, lon, lat,
           sinlat1, coslat1, 
           x, y, xwoffset, ywoffset;

    earthRadius = apMap->twoDMap_earth_radius_ft;
    lonOrigin   = apMap->twoDMap_longitudeOrigin;
    latOrigin   = apMap->twoDMap_latitudeOrigin;
    xOffset     = apMap->twoDMap_x_lon_offset;
    yOffset     = apMap->twoDMap_y_lat_offset;

     lonOriginRad = lonOrigin*DEG_TO_RAD;  
     latOriginRad = latOrigin*DEG_TO_RAD;	 
     sinlat1 = sin(latOriginRad);             
     coslat1 = cos(latOriginRad);               
     x = xffc;
     y = yffc;
     ywoffset = y - yOffset;                 
     xwoffset = x - xOffset;                 

     lon = lonOriginRad + atan( xwoffset / (earthRadius * coslat1 - ywoffset * sinlat1) );

     lat = asin( (earthRadius * sinlat1 + y * coslat1) /
                            sqrt(x * x + y * y + earthRadius * earthRadius) );

     *longitude = lon * RAD_TO_DEG;
     *latitude  = lat * RAD_TO_DEG;

}
